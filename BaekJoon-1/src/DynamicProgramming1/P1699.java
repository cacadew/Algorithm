package DynamicProgramming1;

import java.util.Scanner;

/* 제곱수의 합
 * 어떤 자연수 N은 그보다 작은 제곱수들의 합으로 나타낼 수 있다. 예를 들어 11=32+12+12(3개 항)이다.
 * 이런 표현방법은 여러 가지가 될 수 있는데, 11의 경우 11=22+22+12+12+12(5개 항)도 가능하다.
 * 이 경우, 수학자 숌크라테스는 “11은 3개 항의 제곱수 합으로 표현할 수 있다.”라고 말한다. 또한 11은 그보다 적은 항의 제곱수 합으로 표현할 수 없으므로,
 * 11을 그 합으로써 표현할 수 있는 제곱수 항의 최소 개수는 3이다.
 * 주어진 자연수 N을 이렇게 제곱수들의 합으로 표현할 때에 그 항의 최소개수를 구하는 프로그램을 작성하시오.
 * 
 * 접근방법
 * 1) D[i] = i를 제곱수의 합으로 나타낼 때 필요한 항의 최소 개수
 * 2) i = ? + ? + ~ + ? + j
 * 3) 마지막 항에 오는 수 j가 중요하다!!! 예를들어 j가 2인 경우 D[i] = D[i - 2*2] +1 이다.
 * 4) j*j < i 범위 안에 있어야 하고, D[i]의 최솟값을 찾아 저장하면 된다.
 * 
 */
public class P1699 {
	public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] d = new int[n+1];
        
        for(int i = 1;i<n+1;i++){
        	d[i] = i;
        	for(int j = 1; j*j<=i;j++){
        		if(d[i] > d[i-j*j]+1)
        			d[i] = d[i-j*j]+1;
        	}
        }
        /*
         * n = 18일 경우
         * 마지막이 1*1로 끝날 때 => D[18] = D[18 - 1*1] +1 => D[18] = D[17]+1
         * 마지막이 2*2로 끝날 때 => D[18] = D[18 - 2*2] +1 => D[18] = D[14]+1 
         * 마지막이 3*3로 끝날 때 => D[18] = D[18 - 3*3] +1 => D[18] = D[9] +1
         * 마지막이 4*4로 끝날 때 => D[18] = D[18 - 4*4] +1 => D[18] = D[2] +1
         * 
         * j*j < n 까지 for문이 돌아가니까 4까지만 계산됨
         * j가 3일때 D[9]+1은 2로 가장 최솟값을 가진다. D[18] = 2
         * 
         */
        System.out.println(d[n]);
    }
}
